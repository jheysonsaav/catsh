name: Ci

on: [push, pull_request]

jobs:
  lint:
    name: Testing on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]
        rust-version: [1.51.0, 1.50.0]

    steps:
      - name: Install Rustlang ${{ matrix.rust-version }}
        uses: hecrj/setup-rust-action@v1
        with:
          rust-version: ${{ matrix.rust-version }}

      - uses: actions/checkout@v2

      - name: Versions
        run: |
          rustc --version
          cargo --version

      - name: Install clippy and rustfmt
        run: |
          rustup component add clippy
          rustup component add rustfmt

      - name: Testing on ${{ matrix.os }} with Rust v${{ matrix.rust-version }}
        run: cargo test

      - name: Checking on ${{ matrix.os }} with Rust v${{ matrix.rust-version }}
        run: cargo check

      - name: Linting on ${{ matrix.os }} with Rust v${{ matrix.rust-version }}
        run: cargo clippy

      - name: Formatting on ${{ matrix.os }} with Rust v${{ matrix.rust-version }}
        run: cargo fmt

      - name: Pre-release (Testing) on ${{ matrix.os }} with Rust v${{ matrix.rust-version }}
        if: startsWith(github.ref, 'refs/tags/v')
        run: cargo test --release

      - name: Pre-release (Check) on ${{ matrix.os }} with Rust v${{ matrix.rust-version }}
        if: startsWith(github.ref, 'refs/tags/v')
        run: cargo check --release

  build:
    name: Running on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ "ubuntu-latest", "windows-latest", "macos-latest" ]

    steps:
      - name: Install Rustlang v1.51.0
        uses: hecrj/setup-rust-action@v1
        with:
          rust-version: 1.51.0

      - uses: actions/checkout@v2

      - name: Versions
        run: |
          rustc --version
          cargo --version

      - name: Pre-release (Build)
        if: startsWith(github.ref, 'refs/tags/v')
        run: cargo build --release

      - name: Pre-release (Ubuntu)
        if: |
          startsWith(github.ref, 'refs/tags/v') &&
          startsWith(matrix.os, 'ubuntu')
        run: |
          mkdir stellar-x86_64-unknown-linux-gnu/
          cp -f README.md target/release/stellar stellar-x86_64-unknown-linux-gnu/
          zip -9r stellar-x86_64-unknown-linux-gnu.zip stellar-x86_64-unknown-linux-gnu/

      - name: Pre-release (Windows)
        if: |
          startsWith(github.ref, 'refs/tags/v') &&
          startsWith(matrix.os, 'windows')
        run: |
          New-Item -Path . -Name "stellar-x86_64-pc-windows-msvc" -ItemType "directory"
          Copy-Item -Path "README.md" -Destination "stellar-x86_64-pc-windows-msvc"
          Compress-Archive -CompressionLevel Optimal -Force -Path target/release/stellar.exe -DestinationPath stellar-x86_64-pc-windows-msvc.zip

      - name: Pre-release (MacOS)
        if: |
          startsWith(github.ref, 'refs/tags/v') &&
          startsWith(matrix.os, 'macos')
        run: |
          mkdir stellar-x86_64-apple-darwin/
          cp -f README.md target/release/stellar stellar-x86_64-apple-darwin/
          zip -9r stellar-x86_64-apple-darwin.zip stellar-x86_64-apple-darwin/

      - name: Release
        uses: softprops/action-gh-release@v1
        if: |
          startsWith(github.ref, 'refs/tags/v')
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          files: |
            stellar-x86_64-unknown-linux-gnu.zip
            stellar-x86_64-pc-windows-msvc.zip
            stellar-x86_64-apple-darwin.zip
          draft: true