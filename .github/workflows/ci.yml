name: Ci

on: [push, pull_request]

jobs:
  check:
    name: Checking on ${{ matrix.os }} with Rust v${{ matrix.rust-version }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]
        rust-version: [1.51.0, 1.50.0]

    steps:
      - name: Install Rustlang ${{ matrix.rust-version }}
        uses: hecrj/setup-rust-action@v1
        with:
          rust-version: ${{ matrix.rust-version }}

      - uses: actions/checkout@v2

      - name: Versions
        run: |
          rustc --version
          cargo --version

      - name: Install clippy and rustfmt
        run: |
          rustup component add clippy
          rustup component add rustfmt

      - name: Testing on ${{ matrix.os }} with Rust v${{ matrix.rust-version }}
        run: cargo test

      - name: Checking on ${{ matrix.os }} with Rust v${{ matrix.rust-version }}
        run: cargo check

      - name: Linting on ${{ matrix.os }} with Rust v${{ matrix.rust-version }}
        run: cargo clippy

      - name: Formatting on ${{ matrix.os }} with Rust v${{ matrix.rust-version }}
        run: cargo fmt

      - name: Pre-release (Testing) on ${{ matrix.os }} with Rust v${{ matrix.rust-version }}
        if: startsWith(github.ref, 'refs/tags/v')
        run: cargo test --release

      - name: Pre-release (Check) on ${{ matrix.os }} with Rust v${{ matrix.rust-version }}
        if: startsWith(github.ref, 'refs/tags/v')
        run: cargo check --release

  build:
    name: Building on ${{ matrix.os }} with Rust v${{ matrix.rust-version }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]
        rust-version: [1.51.0]

    steps:
      - name: Install Rustlang v${{ matrix.rust-version }}
        uses: hecrj/setup-rust-action@v1
        with:
          rust-version: ${{ matrix.rust-version }}

      - uses: actions/checkout@v2

      - name: Versions
        run: |
          rustc --version
          cargo --version

      - name: Checking build
        run: cargo build

      - name: Pre-release (Build)
        if: startsWith(github.ref, 'refs/tags/v')
        run: cargo build --release

      - name: Pre-release (Ubuntu x86_64)
        if: |
          startsWith(github.ref, 'refs/tags/v') &&
          startsWith(matrix.os, 'ubuntu')
        run: |
          mkdir catsh-x86_64-unknown-linux-gnu/
          cp -f README.md target/release/catsh catsh-x86_64-unknown-linux-gnu/
          zip -9r catsh-x86_64-unknown-linux-gnu.zip catsh-x86_64-unknown-linux-gnu/
          
      - name: Pre-release (Ubuntu i686)
        if: |
          startsWith(github.ref, 'refs/tags/v') &&
          startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt install gcc-multilib
          rustup target add i686-unknown-linux-gnu
          cargo build --release --target i686-unknown-linux-gnu
          cp -f README.md target/i686-unknown-linux-gnu/release/catsh catsh-i686-unknown-linux-gnu/
          zip -9r catsh-i686-unknown-linux-gnu.zip catsh-i686-unknown-linux-gnu/

      - name: Pre-release (Windows x84_64)
        if: |
          startsWith(github.ref, 'refs/tags/v') &&
          startsWith(matrix.os, 'windows')
        run: |
          New-Item -Path . -Name "catsh-x86_64-pc-windows-msvc" -ItemType "directory"
          Copy-Item -Path "README.md" -Destination "catsh-x86_64-pc-windows-msvc"
          Compress-Archive -CompressionLevel Optimal -Force -Path target/release/catsh.exe -DestinationPath catsh-x86_64-pc-windows-msvc.zip

      - name: Pre-release (Windows i686)
        if: |
          startsWith(github.ref, 'refs/tags/v') &&
          startsWith(matrix.os, 'windows')
        run: |
          rustup target add i686-pc-windows-msvc
          cargo build --release --target i686-pc-windows-msvc
          New-Item -Path . -Name "catsh-i686-pc-windows-msvc" -ItemType "directory"
          Copy-Item -Path "README.md" -Destination "catsh-i686-pc-windows-msvc"
          Compress-Archive -CompressionLevel Optimal -Force -Path target/i686-pc-windows-msvc/release/catsh.exe -DestinationPath catsh-i686-pc-windows-msvc.zip

      - name: Pre-release (MacOS x86_64)
        if: |
          startsWith(github.ref, 'refs/tags/v') &&
          startsWith(matrix.os, 'macos')
        run: |
          mkdir catsh-x86_64-apple-darwin/
          cp -f README.md target/release/catsh catsh-x86_64-apple-darwin/
          zip -9r catsh-x86_64-apple-darwin.zip catsh-x86_64-apple-darwin/

      - name: Release
        uses: softprops/action-gh-release@v1
        if: |
          startsWith(github.ref, 'refs/tags/v')
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          files: |
            catsh-x86_64-unknown-linux-gnu.zip
            catsh-x86_64-pc-windows-msvc.zip
            catsh-x86_64-apple-darwin.zip
            catsh-i686-unknown-linux-gnu.zip
            catsh-i686-pc-windows-msvc.zip
          draft: true

        
      - name: Publish to Cargo
        if: |
          startsWith(github.ref, 'refs/tags/v') &&
          startsWith(matrix.os, 'ubuntu')
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          cd core
          cargo publish
          sleep 30
          cd ../cli
          cargo publish